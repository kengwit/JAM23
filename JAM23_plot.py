import numpy
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
from scipy.interpolate import make_interp_spline
############################################################
def fig_plot():
    strain = numpy.loadtxt('fig2_data.txt')
    wavelength = numpy.loadtxt('fig3_data.txt')
    Holland_2017 = numpy.loadtxt('fig2&3_Holland_2017.txt')
    ratio = numpy.loadtxt('fig4d_data.txt')
    thickness = numpy.loadtxt('fig4a-c_data.txt')
    beta = [1, 1.5, 2, 2.5, 3, 3.5, 4, 6, 8 ,10, 50, 100, 200, 600, 1000]
############ Figure 2A ##############
    fig1, ax1 = plt.subplots()
    plt.semilogx(strain[:,0], strain[:, 1], c='#fdd7d4')
    plt.semilogx(strain[:,0], strain[:, 2], c='#fbacb9')
    plt.semilogx(strain[:,0], strain[:, 3], c='#f767a1')
    plt.semilogx(strain[:,0], strain[:, 4], c='#cd238f')
    plt.semilogx(strain[:,0], strain[:, 5], c='#8b0179')
    plt.semilogx(strain[:,0], strain[:, 6], c='#49006a')

    ax1.semilogx(Holland_2017[25:101, 0], Holland_2017[25:101, 1], linestyle='dashed', color='black', linewidth=1.5)
    plt.xlabel('$\mathit{\\beta}$', rotation=0, labelpad=-3, fontsize=15)
    plt.ylabel('$\mathit{\\epsilon_c}$', rotation=0, labelpad=10, fontsize=15)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.ylim([0.0, 0.6])
    plt.xlim([1.0, 1000.0])
    plt.yticks(np.arange(0.0, 0.61, 0.1))
    ax1.minorticks_on()
    yminorLocator = MultipleLocator(0.025)
    ax1.yaxis.set_minor_locator(yminorLocator)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}} = 0.0$", "$\mathit{\dfrac{P}{\\mu_f}}=0.5$", "$\mathit{\dfrac{P}{\\mu_f}}=1.0$", "$\mathit{\dfrac{P}{\\mu_f}}=2.0$", "$\mathit{\dfrac{P}{\\mu_f}}=3.0$", "$\mathit{\dfrac{P}{\\mu_f}}=4.0$"])
    # plt.savefig('strain_compression.png', dpi=400)
    plt.show()
############ Figure 2B ##############
    fig2, ax1 = plt.subplots()
    plt.semilogx(strain[:,0], strain[:, 7], c='#fdd7d4')
    plt.semilogx(strain[:,0], strain[:, 8], c='#fbacb9')
    plt.semilogx(strain[:,0], strain[:, 9], c='#f767a1')
    plt.semilogx(strain[:,0], strain[:, 10], c='#cd238f')
    plt.semilogx(strain[:,0], strain[:, 11], c='#8b0179')
    plt.semilogx(strain[:,0], strain[:, 12], c='#49006a')
    ax1.semilogx(Holland_2017[25:101, 0], Holland_2017[25:101, 2], linestyle='dashed', color='black', linewidth=1.5)

    plt.xlabel('$\mathit{\\beta}$', rotation=0, labelpad=-3, fontsize=15)
    plt.ylabel('$\mathit{\\epsilon_c}$', rotation=0, labelpad=10, fontsize=15)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.ylim([0.0, 0.6])
    plt.xlim([1.0, 1000.0])
    plt.yticks(np.arange(0.0, 0.61, 0.1))
    ax1.minorticks_on()
    yminorLocator = MultipleLocator(0.025)
    ax1.yaxis.set_minor_locator(yminorLocator)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(
        ["$\mathit{\dfrac{P}{\\mu_f}} = 0.0$", "$\mathit{\dfrac{P}{\\mu_f}}=0.5$", "$\mathit{\dfrac{P}{\\mu_f}}=1.0$",
         "$\mathit{\dfrac{P}{\\mu_f}}=2.0$", "$\mathit{\dfrac{P}{\\mu_f}}=3.0$", "$\mathit{\dfrac{P}{\\mu_f}}=4.0$"])
    # plt.savefig('strain_growth.png', dpi=400)
    plt.show()
############ Figure 3A #############
    fig5, ax1 = plt.subplots()
    ax1.semilogx(wavelength[:, 0], wavelength[:, 1], c='#fdd7d4')
    ax1.semilogx(wavelength[:, 0], wavelength[:, 2], c='#cd238f')
    ax1.semilogx(wavelength[:, 0], wavelength[:, 3], c='#49006a')
    ax1.semilogx(Holland_2017[26:101, 0], Holland_2017[26:101, 3], linestyle='dashed', color='black', linewidth=1.5)

    plt.xlabel('$\mathit{\\beta}$', rotation=0, labelpad=-3, fontsize=14)
    plt.ylabel('$\mathit{\dfrac{L_c}{T}}$', rotation=0, labelpad=10, fontsize=14)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.ylim([0.0, 45.0])
    plt.xlim([1.0, 1000.0])
    plt.yticks(np.arange(0.0, 45.1, 10))
    ax1.minorticks_on()
    yminorLocator = MultipleLocator(2)
    ax1.yaxis.set_minor_locator(yminorLocator)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('wavelength-compression.png', dpi=400)
    plt.show()
############ Figure 3B #############
    fig6, ax1 = plt.subplots()
    ax1.semilogx(wavelength[:, 0], wavelength[:, 4], c='#fdd7d4')
    ax1.semilogx(wavelength[:, 0], wavelength[:, 5], c='#cd238f')
    ax1.semilogx(wavelength[:, 0], wavelength[:, 6], c='#49006a')
    ax1.semilogx(Holland_2017[25:101, 0], Holland_2017[25:101, 4], linestyle='dashed', color='black', linewidth=1.5)

    plt.xlabel('$\mathit{\\beta}$', rotation=0, labelpad=-3, fontsize=14)
    plt.ylabel('$\mathit{\dfrac{L_c}{T}}$', rotation=0, labelpad=10, fontsize=14)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.ylim([0.0, 45.0])
    plt.xlim([1.0, 1000.0])
    plt.yticks(np.arange(0.0, 45.1, 10))
    ax1.minorticks_on()
    yminorLocator = MultipleLocator(2)
    ax1.yaxis.set_minor_locator(yminorLocator)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('wavelength_growth.png', dpi=400)
    plt.show()
#################### Figure 4A ####################
    fig8, ax1 = plt.subplots()
    theta = np.linspace(thickness[:, 0].min(), thickness[:, 0].max(), 300)
    gfg_1 = make_interp_spline(thickness[:, 0], thickness[:, 1], k=2)
    gfg_2 = make_interp_spline(thickness[:, 0], thickness[:, 5], k=2)
    gfg_3 = make_interp_spline(thickness[:, 0], thickness[:, 9], k=2)
    th_new_1 = gfg_1(theta)
    th_new_2 = gfg_2(theta)
    th_new_3 = gfg_3(theta)
    ax1.plot(theta, th_new_1, c='#fdd7d4')
    ax1.plot(theta, th_new_2, c='#cd238f')
    ax1.plot(theta, th_new_3, c='#49006a')

    plt.xlabel('$\mathit{\\vartheta_g}$', rotation=0, labelpad=8, fontsize=12)
    plt.ylabel('$\mathit{\dfrac{t}{t_0}}$', rotation=0, labelpad=10, fontsize=12)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.ylim([1.0, 1.5])
    plt.xlim([1.0, 3.0])
    ax1.set_xticks([1.0, 1.5, 2.0, 2.5, 3.0])
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('mean_th_beta_3.png', dpi=400)
    plt.show()
#################### Figure 4B ####################
    fig9, ax1 = plt.subplots()
    theta = np.linspace(thickness[:, 0].min(), thickness[:, 0].max(), 300)
    gfg_1 = make_interp_spline(thickness[:, 0], thickness[:, 2], k=2)
    gfg_2 = make_interp_spline(thickness[:, 0], thickness[:, 6], k=2)
    gfg_3 = make_interp_spline(thickness[:, 0], thickness[:, 10], k=2)
    th_new_1 = gfg_1(theta)
    th_new_2 = gfg_2(theta)
    th_new_3 = gfg_3(theta)
    ax1.plot(theta, th_new_1, c='#fdd7d4')
    ax1.plot(theta, th_new_2, c='#cd238f')
    ax1.plot(theta, th_new_3, c='#49006a')

    theta = np.linspace(thickness[:, 0].min(), thickness[:, 0].max(), 300)
    gfg_1 = make_interp_spline(thickness[:, 0], thickness[:, 3], k=2)
    gfg_2 = make_interp_spline(thickness[:, 0], thickness[:, 7], k=2)
    gfg_3 = make_interp_spline(thickness[:, 0], thickness[:, 11], k=2)
    th_new_1 = gfg_1(theta)
    th_new_2 = gfg_2(theta)
    th_new_3 = gfg_3(theta)
    ax1.plot(theta, th_new_1, '--', c='#fdd7d4')
    ax1.plot(theta, th_new_2, '--', c='#cd238f')
    ax1.plot(theta, th_new_3, '--', c='#49006a')

    plt.xlabel('$\mathit{\\vartheta_g}$', rotation=0, labelpad=8, fontsize=12)
    plt.ylabel('$\mathit{\dfrac{t}{t_0}}$', rotation=0, labelpad=10, fontsize=12)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.ylim([1.0, 1.5])
    plt.xlim([1.0, 3.0])
    ax1.set_xticks([1.0, 1.5, 2.0, 2.5, 3.0])
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('thickness_beta_3.png', dpi=400)
    plt.show()
#################### Figure 4C ####################
    fig1, ax1 = plt.subplots()
    ax1.plot(thickness[:, 0], thickness[:,4], c='#fdd7d4')
    ax1.plot(thickness[:, 0], thickness[:,8], c='#cd238f')
    ax1.plot(thickness[:, 0], thickness[:,12], c='#49006a')

    plt.xlabel('$\mathit{\\vartheta_g}$', rotation=0, labelpad=8, fontsize=12)
    plt.ylabel('$\mathit{\dfrac{t_g}{t_s}}$', rotation=0, labelpad=10, fontsize=12)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.ylim([0.99, 1.2])
    plt.xlim([1.0, 3.0])
    ax1.set_xticks([1.0, 1.5, 2.0, 2.5, 3.0])
    ax1.set_yticks([1.00, 1.05, 1.10, 1.15, 1.20])
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('ratio_beta_3.png', dpi=400)
    plt.show()
#################### Figure 4D ####################
    fig7, ax1 = plt.subplots()
    ax1.semilogx(beta, ratio[:,1], c='#fdd7d4')
    ax1.semilogx(beta, ratio[:,2], c='#cd238f')
    ax1.semilogx(beta, ratio[:,3], c='#49006a')

    plt.xlabel('$\mathit{\\beta}$', rotation=0, labelpad=2, fontsize=12)
    plt.ylabel('$\mathit{\dfrac{t_g}{t_s}}$', rotation=0, labelpad=10, fontsize=12)
    ax1.tick_params(bottom=True, top=False, left=True, right=True)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.ylim([0.99, 1.2])
    plt.xlim([1.0, 1000.0])
    ax1.set_yticks([1.00, 1.05, 1.10, 1.15, 1.20])
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    ax1.yaxis.set_ticks_position('both')
    plt.legend(["$\mathit{\dfrac{P}{\\mu_f}}$ = 0", "$\mathit{\dfrac{P}{\\mu_f}}$ = 2", "$\mathit{\dfrac{P}{\\mu_f}}$ = 4"])
    # plt.savefig('th_ratio_1-1000.png', dpi=400)
    plt.show()
############################################################
fig_plot()